$date
  Mon Sep 25 16:20:51 2017
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 4 ! s_a[3:0] $end
$var reg 4 " s_b[3:0] $end
$var reg 4 # s_g[3:0] $end
$var reg 1 $ s_cin $end
$var reg 1 % s_s0 $end
$var reg 1 & s_s1 $end
$var reg 1 ' s_cout $end
$scope module alu $end
$var reg 4 ( a[3:0] $end
$var reg 4 ) b[3:0] $end
$var reg 1 * cin $end
$var reg 1 + s0 $end
$var reg 1 , s1 $end
$var reg 4 - g[3:0] $end
$var reg 1 . cout $end
$var reg 4 / wm_out[3:0] $end
$scope module mux $end
$var reg 4 0 b[3:0] $end
$var reg 1 1 s0 $end
$var reg 1 2 s1 $end
$var reg 4 3 oput[3:0] $end
$var reg 1 4 s_xor $end
$var reg 4 5 mux_out[3:0] $end
$var reg 4 6 nmux_out[3:0] $end
$scope module xor1 $end
$var reg 1 7 in1 $end
$var reg 1 8 in2 $end
$var reg 1 9 out1 $end
$upscope $end
$scope module mux1 $end
$var reg 4 : input1[3:0] $end
$var reg 4 ; input2[3:0] $end
$var reg 1 < sel $end
$var reg 4 = output[3:0] $end
$var reg 1 > nsel $end
$var reg 4 ? output1[3:0] $end
$var reg 4 @ output2[3:0] $end
$scope module inverter1 $end
$var reg 1 A input $end
$var reg 1 B output $end
$upscope $end
$scope module (0) $end
$scope module and2_1 $end
$var reg 1 C in1 $end
$var reg 1 D in2 $end
$var reg 1 E out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 F in1 $end
$var reg 1 G in2 $end
$var reg 1 H out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 I in1 $end
$var reg 1 J in2 $end
$var reg 1 K out1 $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module and2_1 $end
$var reg 1 L in1 $end
$var reg 1 M in2 $end
$var reg 1 N out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 O in1 $end
$var reg 1 P in2 $end
$var reg 1 Q out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 R in1 $end
$var reg 1 S in2 $end
$var reg 1 T out1 $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module and2_1 $end
$var reg 1 U in1 $end
$var reg 1 V in2 $end
$var reg 1 W out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 X in1 $end
$var reg 1 Y in2 $end
$var reg 1 Z out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 [ in1 $end
$var reg 1 \ in2 $end
$var reg 1 ] out1 $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module and2_1 $end
$var reg 1 ^ in1 $end
$var reg 1 _ in2 $end
$var reg 1 ` out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 a in1 $end
$var reg 1 b in2 $end
$var reg 1 c out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 d in1 $end
$var reg 1 e in2 $end
$var reg 1 f out1 $end
$upscope $end
$upscope $end
$upscope $end
$scope module (0) $end
$scope module inv $end
$var reg 1 g input $end
$var reg 1 h output $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module inv $end
$var reg 1 i input $end
$var reg 1 j output $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module inv $end
$var reg 1 k input $end
$var reg 1 l output $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module inv $end
$var reg 1 m input $end
$var reg 1 n output $end
$upscope $end
$upscope $end
$scope module mux2 $end
$var reg 4 o input1[3:0] $end
$var reg 4 p input2[3:0] $end
$var reg 1 q sel $end
$var reg 4 r output[3:0] $end
$var reg 1 s nsel $end
$var reg 4 t output1[3:0] $end
$var reg 4 u output2[3:0] $end
$scope module inverter1 $end
$var reg 1 v input $end
$var reg 1 w output $end
$upscope $end
$scope module (0) $end
$scope module and2_1 $end
$var reg 1 x in1 $end
$var reg 1 y in2 $end
$var reg 1 z out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 { in1 $end
$var reg 1 | in2 $end
$var reg 1 } out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 !" in1 $end
$var reg 1 "" in2 $end
$var reg 1 #" out1 $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module and2_1 $end
$var reg 1 $" in1 $end
$var reg 1 %" in2 $end
$var reg 1 &" out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 '" in1 $end
$var reg 1 (" in2 $end
$var reg 1 )" out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 *" in1 $end
$var reg 1 +" in2 $end
$var reg 1 ," out1 $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module and2_1 $end
$var reg 1 -" in1 $end
$var reg 1 ." in2 $end
$var reg 1 /" out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 0" in1 $end
$var reg 1 1" in2 $end
$var reg 1 2" out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 3" in1 $end
$var reg 1 4" in2 $end
$var reg 1 5" out1 $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module and2_1 $end
$var reg 1 6" in1 $end
$var reg 1 7" in2 $end
$var reg 1 8" out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 9" in1 $end
$var reg 1 :" in2 $end
$var reg 1 ;" out1 $end
$upscope $end
$scope module or2_1 $end
$var reg 1 <" in1 $end
$var reg 1 =" in2 $end
$var reg 1 >" out1 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder $end
$var reg 4 ?" input1[3:0] $end
$var reg 4 @" input2[3:0] $end
$var reg 1 A" cin $end
$var reg 4 B" sum[3:0] $end
$var reg 1 C" cout $end
$var reg 1 D" carry1 $end
$var reg 1 E" carry2 $end
$var reg 1 F" carry3 $end
$scope module adder1_1 $end
$var reg 1 G" input1 $end
$var reg 1 H" input2 $end
$var reg 1 I" cin $end
$var reg 1 J" sum $end
$var reg 1 K" cout $end
$var reg 1 L" temp1 $end
$var reg 1 M" temp2 $end
$var reg 1 N" temp3 $end
$var reg 1 O" temp4 $end
$scope module xor2_1 $end
$var reg 1 P" in1 $end
$var reg 1 Q" in2 $end
$var reg 1 R" out1 $end
$upscope $end
$scope module xor2_2 $end
$var reg 1 S" in1 $end
$var reg 1 T" in2 $end
$var reg 1 U" out1 $end
$upscope $end
$scope module and2_1 $end
$var reg 1 V" in1 $end
$var reg 1 W" in2 $end
$var reg 1 X" out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 Y" in1 $end
$var reg 1 Z" in2 $end
$var reg 1 [" out1 $end
$upscope $end
$scope module and2_3 $end
$var reg 1 \" in1 $end
$var reg 1 ]" in2 $end
$var reg 1 ^" out1 $end
$upscope $end
$scope module or3_1 $end
$var reg 1 _" in1 $end
$var reg 1 `" in2 $end
$var reg 1 a" in3 $end
$var reg 1 b" out1 $end
$upscope $end
$upscope $end
$scope module adder1_2 $end
$var reg 1 c" input1 $end
$var reg 1 d" input2 $end
$var reg 1 e" cin $end
$var reg 1 f" sum $end
$var reg 1 g" cout $end
$var reg 1 h" temp1 $end
$var reg 1 i" temp2 $end
$var reg 1 j" temp3 $end
$var reg 1 k" temp4 $end
$scope module xor2_1 $end
$var reg 1 l" in1 $end
$var reg 1 m" in2 $end
$var reg 1 n" out1 $end
$upscope $end
$scope module xor2_2 $end
$var reg 1 o" in1 $end
$var reg 1 p" in2 $end
$var reg 1 q" out1 $end
$upscope $end
$scope module and2_1 $end
$var reg 1 r" in1 $end
$var reg 1 s" in2 $end
$var reg 1 t" out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 u" in1 $end
$var reg 1 v" in2 $end
$var reg 1 w" out1 $end
$upscope $end
$scope module and2_3 $end
$var reg 1 x" in1 $end
$var reg 1 y" in2 $end
$var reg 1 z" out1 $end
$upscope $end
$scope module or3_1 $end
$var reg 1 {" in1 $end
$var reg 1 |" in2 $end
$var reg 1 }" in3 $end
$var reg 1 !# out1 $end
$upscope $end
$upscope $end
$scope module adder1_3 $end
$var reg 1 "# input1 $end
$var reg 1 ## input2 $end
$var reg 1 $# cin $end
$var reg 1 %# sum $end
$var reg 1 &# cout $end
$var reg 1 '# temp1 $end
$var reg 1 (# temp2 $end
$var reg 1 )# temp3 $end
$var reg 1 *# temp4 $end
$scope module xor2_1 $end
$var reg 1 +# in1 $end
$var reg 1 ,# in2 $end
$var reg 1 -# out1 $end
$upscope $end
$scope module xor2_2 $end
$var reg 1 .# in1 $end
$var reg 1 /# in2 $end
$var reg 1 0# out1 $end
$upscope $end
$scope module and2_1 $end
$var reg 1 1# in1 $end
$var reg 1 2# in2 $end
$var reg 1 3# out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 4# in1 $end
$var reg 1 5# in2 $end
$var reg 1 6# out1 $end
$upscope $end
$scope module and2_3 $end
$var reg 1 7# in1 $end
$var reg 1 8# in2 $end
$var reg 1 9# out1 $end
$upscope $end
$scope module or3_1 $end
$var reg 1 :# in1 $end
$var reg 1 ;# in2 $end
$var reg 1 <# in3 $end
$var reg 1 =# out1 $end
$upscope $end
$upscope $end
$scope module adder1_4 $end
$var reg 1 ># input1 $end
$var reg 1 ?# input2 $end
$var reg 1 @# cin $end
$var reg 1 A# sum $end
$var reg 1 B# cout $end
$var reg 1 C# temp1 $end
$var reg 1 D# temp2 $end
$var reg 1 E# temp3 $end
$var reg 1 F# temp4 $end
$scope module xor2_1 $end
$var reg 1 G# in1 $end
$var reg 1 H# in2 $end
$var reg 1 I# out1 $end
$upscope $end
$scope module xor2_2 $end
$var reg 1 J# in1 $end
$var reg 1 K# in2 $end
$var reg 1 L# out1 $end
$upscope $end
$scope module and2_1 $end
$var reg 1 M# in1 $end
$var reg 1 N# in2 $end
$var reg 1 O# out1 $end
$upscope $end
$scope module and2_2 $end
$var reg 1 P# in1 $end
$var reg 1 Q# in2 $end
$var reg 1 R# out1 $end
$upscope $end
$scope module and2_3 $end
$var reg 1 S# in1 $end
$var reg 1 T# in2 $end
$var reg 1 U# out1 $end
$upscope $end
$scope module or3_1 $end
$var reg 1 V# in1 $end
$var reg 1 W# in2 $end
$var reg 1 X# in3 $end
$var reg 1 Y# out1 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0010 !
b1010 "
b1101 #
1$
0%
0&
0'
b0010 (
b1010 )
1*
0+
0,
b1101 -
0.
b0000 /
b1010 0
01
02
b0000 3
04
b0000 5
b1111 6
07
08
09
b0000 :
b1010 ;
0<
b0000 =
1>
b0000 ?
b0000 @
0A
1B
0C
1D
0E
0F
0G
0H
0I
0J
0K
0L
1M
0N
1O
0P
0Q
0R
0S
0T
0U
1V
0W
0X
0Y
0Z
0[
0\
0]
0^
1_
0`
1a
0b
0c
0d
0e
0f
0g
1h
0i
1j
0k
1l
0m
1n
b0000 o
b1111 p
0q
b0000 r
1s
b0000 t
b0000 u
0v
1w
0x
1y
0z
1{
0|
0}
0!"
0""
0#"
0$"
1%"
0&"
1'"
0("
0)"
0*"
0+"
0,"
0-"
1."
0/"
10"
01"
02"
03"
04"
05"
06"
17"
08"
19"
0:"
0;"
0<"
0="
0>"
b0010 ?"
b1010 @"
1A"
b1101 B"
0C"
0D"
1E"
0F"
0G"
0H"
1I"
1J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
1S"
0T"
1U"
0V"
0W"
0X"
0Y"
1Z"
0["
0\"
1]"
0^"
0_"
0`"
0a"
0b"
1c"
1d"
0e"
0f"
1g"
0h"
1i"
0j"
0k"
1l"
1m"
0n"
0o"
0p"
0q"
1r"
1s"
1t"
1u"
0v"
0w"
1x"
0y"
0z"
1{"
0|"
0}"
1!#
0"#
0##
1$#
1%#
0&#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
1.#
0/#
10#
01#
02#
03#
04#
15#
06#
07#
18#
09#
0:#
0;#
0<#
0=#
0>#
1?#
0@#
1A#
0B#
1C#
0D#
0E#
0F#
0G#
1H#
1I#
0J#
1K#
1L#
0M#
1N#
0O#
0P#
0Q#
0R#
1S#
0T#
0U#
0V#
0W#
0X#
0Y#
#1
